%md
%md
#  Introdu√ß√£o

No contexto para o mini projeto de de pipeline de dados em SQL, vamos trabalhar com a  livraria DevSaber √© uma loja de vendas online onde atualmente os dados como vendas, produtos e de todos os clientes estao armazenados em planilhas distintas. Sabemos que planilhas sao uteis para pequenos volumes de dados, como a livraria tem aumentado o seu volume de vendas, agora precisar cuidar desses dados de maneira mais eficiente e ordenada. 

### Objetivo

O projeto tem como objetivo transformar as planilhas de dados da Livraria DevSaber num _mini data warehouse_ inteligente no BigQuery. 
Criaremos um todo o pipeline de dados: estrututura, carregamento, e analise de algumas quest√µes de neg√≥cio da livraria.


> üéØ Objetivo de aprendizagem

Ao final desse projeto sabere estruturar um schema, realizar a ingets√ßao de dados, construir consultas SQL analiticas, desenvolver uma view e muito mais. 

**1. Estruturas e armazenamento no Big Query**

* Sintaxe e Nomenclatura
      
 `CREATE TABLE` e `CREATE OR REPLACE`  utilizados para que o script de cria√ß√£o seja executado v√°rias vezes sem gerar erros, substituindo a tabela existente.

* Tipos de dados

_STRING_ ‚Üí TEXTO

_NUMERIC_ ‚Üí NUMEROS DECIMAIS 

_FLOAT64_ ‚Üí NUMEROS DE PONTOS FLUTUANTES

_DATE / DATETIME / TIMESTAMP_ ‚Üí DATA E HORA 

_INT64_ ‚Üí NUMEROS INTEIROS


* O Conceito de "Sem Chaves" (Paradigma Fundamental)

O BigQuery n√£o imp√µe restri√ß√µes de `PRIMARY KEY` ou `FOREIGN KEY`. Os relacionamentos entre tabelas atrav√©s da condi√ß√£o na cl√°usula `JOIN `... `ON`


**2. Carregando Dados**


* Ingest√£o com `INSERT` e `INSERT INTO `no BigQuery


**3. Analise de Dados**


A sintaxe para consultar dados no BigQuery √© em grande parte compat√≠vel com o padr√£o ANSI SQL.

`SELECT`,
`FROM`, 
`JOIN`, 
`WHERE`, 
`GROUP BY`, 
`ORDER BY`
`SUM()` 
`COUNT()`


**4. Automa√ß√£o e Reuso: `VIEW` no BigQuery**


Toda vez que a `VIEW` √© consultada, o BigQuery executa a consulta SQL subjacente que a define. O custo de consultar a `VIEW` √© o mesmo custo de executar a consulta original.



> üìä Base de Dados


Os dados utilizados nessa an√°lise foram abtidos das planilhas ficticias da livraria:
https://console.cloud.google.com/bigquery?ws=!1m4!1m3!3m2!1st1engenhariadados!2sGrupo_10

No dataset contem informa√ß√µes  sobre compras realizadas na livraria contendo data, quantidade, categorias de livros, linhas de produtos e informa√ß√µes de clientes.


> üõ†Ô∏è Ferramentas 


Para o projeto foi utiliazado o BigQuery para desenvolver e estruturar os dados disponibilizados para as consultas. 


> üî¨ An√°lise Realizada


**üí°Contexto**

A livraria precisava utilizar os dados gerados atarves das vendas, produtos e clientes para levantar quest√µes de sobre a segmenta√ß√£o de produtos, perfil de clientes, e principlamente porque agora precisava tomar decis√µes estrategicas para continuar o crescimento do neg√≥cio, totalmente baseado em numeros(dados).

Essas foram algumas perguntas feitas sobre o negocio e foram respondidas como os dados da consulta realizada: 

        1. Rankear vendas por categorias para o exercico de 2024, identificar a categoria mais vendida. 
                 
        2. Identificar o Estado com maior e menor numero de vendas no ano de 2024.

        3. T√≠tulo de maior interesse pelos clientes no estado de RR no ano de 2023.

        4. Idade m√©dia dos clientes por categoria.

        5. Quais produtos tiveram maior sa√≠da.

        6. Valor do ticket medio de compra por cliente.

        7. Exibir apenas os titulos correspondentes a uma categoria.

        


Alem disso, alguns questionamentos foram importantes para sintetizar o conte√∫do e maximizar a capacidade de aprendizado do grupo. Por isso, vamos responder algumas perguntas: 

### *Perguntas para a turma*



1. _Por que uma planilha n√£o √© ideal para uma empresa que quer analisar suas vendas a fundo?_

    resposta:

            Planilhas sao limitadas quando se tratam de analise do dados. Sua limita√ß√£o ao conectar e organizar dados com varias tabelas dificulta a automa√ß√£o de consultas, a integra√ß√£o com ferramentas de analise de dados e a outros sistemas se tornam ineficazes. Um ponto de aten√ß√£o √© a seguran√ßa das planilhas, a qualquer momento podem sofrer altera√ß√µes erroenas e inesperadas, aumentando o indice de erro e ineficiencia dos dados.


2.  _Que tipo de perguntas voc√™s acham que o dono da livraria gostaria de responder com esses dados?_

      resposta: (Sugest√£o: INSERIR INFORMA√á√ïES SOBRE PERGUNTAS ELABORADAS PARA AS CONSULTAS)

            1. Rankear vendas por categorias em cada trimestre do ultimo exercicio para os resultados em cada estado;            

            2. Identificar periodo de menor e maior numero de vendas por estado em cada trimestre:

            3. T√≠tulo de maior interesse pelos clientes no ultimo ano;

            4. Quantidade de vendas semanal. (view)

       

3. _Com base nos dados brutos, quais outras duas tabelas precisamos criar? Que colunas e tipos de dados elas teriam?_

      resposta:
	  Se a gente tem dados brutos de vendas, normalmente eles v√™m meio misturados, tipo: ID do cliente, nome do cliente, produto comprado, categoria, pre√ßo, quantidade, data da compra tudo junto numa tabela s√≥.

Pra organizar melhor (e n√£o ficar repetindo informa√ß√£o √† toa), a gente costuma separar em tabelas. Al√©m da tabela de vendas, que j√° existe, faria sentido criar pelo menos mais duas tabelas

4. _Se o BigQuery n√£o tem chaves estrangeiras, como garantimos que um ID_Cliente na tabela de vendas realmente existe na tabela de clientes? (Resposta: A responsabilidade √© nossa, na hora de construir a consulta com o JOIN)._

      resposta:
	  Quem tem que garantir isso somos n√≥s, quando fazemos a consulta. Ou seja, na hora de montar o JOIN, eu junto as duas tabelas pelo ID_Cliente. Se n√£o existir esse cliente na tabela de clientes, ele n√£o aparece no resultado (ou aparece nulo, dependendo do tipo de JOIN que eu usar)



5. _Por que √© uma boa pr√°tica inserir os clientes e produtos em suas pr√≥prias tabelas antes de inserir os dados de vendas?_

      resposta: 
      
            A tabela Clientes e Produtos sao tabelas que contem as chamadas _primary keys_ que podem ser os pontos de partida para as conex√µes de relacionamento entre as demais tabelas, principalmente para a tabela de vendas, onde contem as _foreign keys_, onde a chave de identifica√ß√£o de vendas carrega tbm as chaves de produtos e clientes. Sendo assim, a ordem de cria√ß√£o da tabela deve seguir uma ordem logica para que haja nexo na tabela de vendas.


6. _Em um cen√°rio com milh√µes de vendas por dia, o `INSERT INTO` seria a melhor abordagem?_

      resposta:

            Pode ser que nao seja a melhor op√ß√£o. Para o uso de grandes volumes de dados, √© indicado que seja realizada a conex√£o com servidores de dados.


7. _Qual √© a principal vantagem de usar uma `VIEW` em vez de simplesmente salvar o c√≥digo em um arquivo de texto?_

      resposta: 
              
            Uma view economiza nos dados processados. 


8. _Se o pre√ßo de um produto mudar na tabela `Produtos`, o `Valor_Total` na `VIEW` ser√° atualizado automaticamente na pr√≥xima vez que a consultarmos?_


     resposta: 

            Sim. Os dados de uma view nao serao armazenados. Apenas a consulta. Entao, sempre que for execultada a consulta (view) salva, os dados serao carregados conforme atualiza√ß√£o no banco de dados.

